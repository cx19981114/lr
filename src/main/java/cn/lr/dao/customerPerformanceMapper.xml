<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.lr.dao.customerPerformanceMapper">
  <resultMap id="BaseResultMap" type="cn.lr.po.customerPerformance">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="customerId" jdbcType="INTEGER" property="customerId" />
    <result column="employeeId" jdbcType="INTEGER" property="employeeId" />
    <result column="dateTime" jdbcType="VARCHAR" property="dateTime" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="money" jdbcType="INTEGER" property="money" />
    <result column="note" jdbcType="VARCHAR" property="note" />
    <result column="state" jdbcType="INTEGER" property="state" />
  </resultMap>
  <sql id="Base_Column_List">
    id, customerId, employeeId, dateTime, type, money, note, state
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from tb_customerperformance
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from tb_customerperformance
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="cn.lr.po.customerPerformance" useGeneratedKeys="true" keyProperty="id">
    insert into tb_customerperformance (id, customerId, employeeId, 
      dateTime, type, money, 
      note, state)
    values (#{id,jdbcType=INTEGER}, #{customerId,jdbcType=INTEGER}, #{employeeId,jdbcType=INTEGER}, 
      #{dateTime,jdbcType=VARCHAR}, #{type,jdbcType=INTEGER}, #{money,jdbcType=INTEGER}, 
      #{note,jdbcType=VARCHAR}, #{state,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="cn.lr.po.customerPerformance" useGeneratedKeys="true" keyProperty="id">
    insert into tb_customerperformance
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="customerId != null">
        customerId,
      </if>
      <if test="employeeId != null">
        employeeId,
      </if>
      <if test="dateTime != null">
        dateTime,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="money != null">
        money,
      </if>
      <if test="note != null">
        note,
      </if>
      <if test="state != null">
        state,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="customerId != null">
        #{customerId,jdbcType=INTEGER},
      </if>
      <if test="employeeId != null">
        #{employeeId,jdbcType=INTEGER},
      </if>
      <if test="dateTime != null">
        #{dateTime,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="money != null">
        #{money,jdbcType=INTEGER},
      </if>
      <if test="note != null">
        #{note,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.lr.po.customerPerformance">
    update tb_customerperformance
    <set>
      <if test="customerId != null">
        customerId = #{customerId,jdbcType=INTEGER},
      </if>
      <if test="employeeId != null">
        employeeId = #{employeeId,jdbcType=INTEGER},
      </if>
      <if test="dateTime != null">
        dateTime = #{dateTime,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="money != null">
        money = #{money,jdbcType=INTEGER},
      </if>
      <if test="note != null">
        note = #{note,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.lr.po.customerPerformance">
    update tb_customerperformance
    set customerId = #{customerId,jdbcType=INTEGER},
      employeeId = #{employeeId,jdbcType=INTEGER},
      dateTime = #{dateTime,jdbcType=VARCHAR},
      type = #{type,jdbcType=INTEGER},
      money = #{money,jdbcType=INTEGER},
      note = #{note,jdbcType=VARCHAR},
      state = #{state,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <select id="selectByEmployeeState"  resultMap="BaseResultMap">
    select <include refid="Base_Column_List" />
    from tb_customerperformance
    where employeeId = #{employeeId,jdbcType=INTEGER} 
     <if test="state != null">
    	and state in
	    <foreach collection="state" item="item" open="(" close=")" index="index" separator=",">
	         #{item,jdbcType=INTEGER}
	    </foreach>
    </if> 
    and TO_DAYS(dateTime) = TO_DAYS(now()) 
  </select>
  
  <select id="selectByEmployeeConditionDay"  resultMap="BaseResultMap">
    select <include refid="Base_Column_List" />
    from tb_customerperformance
    where employeeId = #{employeeId,jdbcType=INTEGER} 
     <if test="state != null">
    	and state in
	    <foreach collection="state" item="item" open="(" close=")" index="index" separator=",">
	         #{item,jdbcType=INTEGER}
	    </foreach>
    </if> 
    and TO_DAYS(dateTime) = TO_DAYS(#{date,jdbcType=INTEGER}) order by dateTime desc limit #{page},#{size}
  </select>
  <select id="selectByEmployeeConditionDayCount"  resultType="Integer">
    select count(*)
    from tb_customerperformance
    where employeeId = #{employeeId,jdbcType=INTEGER} 
     <if test="state != null">
    	and state in
	    <foreach collection="state" item="item" open="(" close=")" index="index" separator=",">
	         #{item,jdbcType=INTEGER}
	    </foreach>
    </if>  
    and TO_DAYS(dateTime) = TO_DAYS(#{date,jdbcType=INTEGER})
  </select>
  
  <select id="selectByEmployeeConditionMon"  resultMap="BaseResultMap">
    select <include refid="Base_Column_List" />
    from tb_customerperformance
    where employeeId = #{employeeId,jdbcType=INTEGER} 
     <if test="state != null">
    	and state in
	    <foreach collection="state" item="item" open="(" close=")" index="index" separator=",">
	         #{item,jdbcType=INTEGER}
	    </foreach>
    </if> 
    and DATE_FORMAT( dateTime, '%Y%m' ) = DATE_FORMAT( #{date,jdbcType=INTEGER} , '%Y%m' )  order by dateTime desc limit #{page},#{size}
  </select>
  <select id="selectByEmployeeConditionMonCount"  resultType="Integer">
    select count(*)
    from tb_customerperformance
    where employeeId = #{employeeId,jdbcType=INTEGER} 
     <if test="state != null">
    	and state in
	    <foreach collection="state" item="item" open="(" close=")" index="index" separator=",">
	         #{item,jdbcType=INTEGER}
	    </foreach>
    </if> 
    and DATE_FORMAT( dateTime, '%Y%m' ) = DATE_FORMAT( #{date,jdbcType=INTEGER} , '%Y%m' )
  </select>
  
  <select id="selectByEmployeeConditionYear"  resultMap="BaseResultMap">
    select <include refid="Base_Column_List" />
    from tb_customerperformance
    where employeeId = #{employeeId,jdbcType=INTEGER} 
     <if test="state != null">
    	and state in
	    <foreach collection="state" item="item" open="(" close=")" index="index" separator=",">
	         #{item,jdbcType=INTEGER}
	    </foreach>
    </if> 
    and YEAR(dateTime)=YEAR(#{date,jdbcType=INTEGER})  order by dateTime desc limit #{page},#{size}
  </select>
  <select id="selectByEmployeeConditionYearCount"  resultType="Integer">
    select count(*)
    from tb_customerperformance
    where employeeId = #{employeeId,jdbcType=INTEGER} 
     <if test="state != null">
    	and state in
	    <foreach collection="state" item="item" open="(" close=")" index="index" separator=",">
	         #{item,jdbcType=INTEGER}
	    </foreach>
    </if>  
    and YEAR(dateTime)=YEAR(#{date,jdbcType=INTEGER})
  </select>
  
  <select id="selectByEmployeeCondition"  resultMap="BaseResultMap">
    select <include refid="Base_Column_List" />
    from tb_customerperformance
    where employeeId = #{employeeId,jdbcType=INTEGER} 
    <if test="state != null">
    	and state in
	    <foreach collection="state" item="item" open="(" close=")" index="index" separator=",">
	         #{item,jdbcType=INTEGER}
	    </foreach>
    </if>  
    order by dateTime desc limit #{page},#{size}
  </select>
  <select id="selectByEmployeeConditionCount">
    select count(*)
    from tb_customerperformance
    where employeeId = #{employeeId,jdbcType=INTEGER} 
     <if test="state != null">
    	and state in
	    <foreach collection="state" item="item" open="(" close=")" index="index" separator=",">
	         #{item,jdbcType=INTEGER}
	    </foreach>
    </if>  
  </select>
    <select id="selectByEmployee"  resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from tb_customerperformance
    where employeeId = #{employeeId,jdbcType=INTEGER} 
     <if test="state != null">
    	and state not in
	    <foreach collection="state" item="item" open="(" close=")" index="index" separator=",">
	         #{item,jdbcType=INTEGER}
	    </foreach>
    </if> 
    order by dateTime desc limit #{page},#{size}
  </select>
  <select id="selectByEmployeeCount"  resultType="Integer">
    select count(*)
    from tb_customerperformance
    where employeeId = #{employeeId,jdbcType=INTEGER} 
     <if test="state != null">
    	and state not in
	    <foreach collection="state" item="item" open="(" close=")" index="index" separator=",">
	         #{item,jdbcType=INTEGER}
	    </foreach>
    </if> 
  </select>
</mapper>